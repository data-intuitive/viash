package com.dataintuitive.viash

import java.io.ByteArrayOutputStream
import java.nio.file.Paths

import com.dataintuitive.viash.functionality.Functionality
import com.dataintuitive.viash.helpers.IO
import org.scalatest.{BeforeAndAfterAll, FunSuite}

import scala.reflect.io.Directory


class E2EMainTest extends FunSuite with BeforeAndAfterAll {
  // which platform to test
  private val funcFile = getClass.getResource("/testbash/functionality.yaml").getPath
  private val funcNoTestFile = getClass.getResource("/testbash/functionality_no_tests.yaml").getPath
  private val funcFailedTestFile = getClass.getResource("/testbash/functionality_failed_test.yaml").getPath
  private val platFile = getClass.getResource("/testbash/platform_docker.yaml").getPath
  private val platFailedBuildFile = getClass.getResource("/testbash/platform_docker_failed_build.yaml").getPath

  private val temporaryFolder = IO.makeTemp("viash_tester")
  private val tempFolStr = temporaryFolder.toString

  // parse functionality from file
  //private val functionality = Functionality.parse(IO.uri(funcFile))

  Console.println(s"tempFolStr: $tempFolStr")


  test("Check standard test output for typical outputs") {
    val testText = executeMainAndCaptureStdOut(
      Array(
        "test",
        "-f", funcFile,
        "-p", platFile
      ))
    assert(testText.contains("Running tests in temporary directory: ") === true)
    assert(testText.contains("SUCCESS! All 2 out of 2 test scripts succeeded!") === true)
    assert(testText.contains("Cleaning up temporary directory") === true)

    subtestTemporaryDirectory(testText, false)
  }



  test("Check output in case --keep is specified") {
    val testText = executeMainAndCaptureStdOut(
      Array(
        "test",
        "-f", funcFile,
        "-p", platFile,
        "--keep"
      ))
    assert(testText.contains("Running tests in temporary directory: ") === true)
    assert(testText.contains("SUCCESS! All 2 out of 2 test scripts succeeded!") === true)
    assert(testText.contains("Cleaning up temporary directory") === false)

    subtestTemporaryDirectory(testText, true)
  }


  test("Check test output when no tests are specified in the functionality file") {
    val testText = executeMainAndCaptureStdOut(
      Array(
        "test",
        "-f", funcNoTestFile,
        "-p", platFile
      ))
    assert(testText.contains("Running tests in temporary directory: ") === true)
    assert(testText.contains("WARNING! No tests found!") === true)
    assert(testText.contains("Cleaning up temporary directory") === true)

    subtestTemporaryDirectory(testText, false)
  }

  test("Check test output when a test fails") {
    val testText = executeMainAndCaptureStdOutWithException(Array(
      "test",
      "-f", funcFailedTestFile,
      "-p", platFile
    ))

    assert(testText.contains("Running tests in temporary directory: ") === true)
    assert(testText.contains("ERROR! Only 1 out of 2 test scripts succeeded!") === true)
    assert(testText.contains("Cleaning up temporary directory") === false)

    subtestTemporaryDirectory(testText, true)
  }

  test("Check failing build") {
    val testText = executeMainAndCaptureStdOutWithException(
      Array(
        "test",
        "-f", funcFile,
        "-p", platFailedBuildFile
      ))

    assert(testText.contains("Running tests in temporary directory: ") === true)
    assert(testText.contains("ERROR! Setup failed!") === true)
    assert(testText.contains("Cleaning up temporary directory") === false)

    subtestTemporaryDirectory(testText, true)
  }

  /**
   * Searches the output generated by Main.main() during tests for the temporary directory name and verifies if it still exists or not.
   * If directory was expected to be present and actually is present, it will be removed.
   * @param testText the text generated by Main.main()
   * @param expectDirectoryExists expect the directory to be present or not
   * @return
   */
  def subtestTemporaryDirectory(testText: String, expectDirectoryExists: Boolean) = {
    // Get temporary directory
    val Regex = ".*Running tests in temporary directory: '([^']*)'.*".r

    var tempPath = ""
    testText.replaceAll("\n", "") match {
      case Regex(path) => tempPath = path
      case _ => {}
    }

    assert(tempPath.contains("/tmp/viash_test_testbash") === true)

    val tempFolder = new Directory(Paths.get(tempPath).toFile)
    if (expectDirectoryExists) {
      // Check temporary directory is still present
      assert(tempFolder.exists === true)
      assert(tempFolder.isDirectory === true)

      // Remove the temporary directory
      tempFolder.deleteRecursively()
      assert(tempFolder.exists === false)
    }
    else {
      assert(tempFolder.exists === false)
    }
  }

  override def afterAll() {
    IO.deleteRecursively(temporaryFolder)
  }
}
