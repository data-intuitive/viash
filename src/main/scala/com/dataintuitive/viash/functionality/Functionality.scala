package com.dataintuitive.viash.functionality

import scala.io.Source
import io.circe.yaml.parser
import java.nio.file.Paths
import java.io.File
import dataobjects._
import resources._

case class Functionality(
  name: String,
  description: Option[String],
  resources: List[Resource],
  function_type: Option[String],
  arguments: List[DataObject[_]] = Nil,
  private var _rootDir: Option[File] = None // :/
) {

  require(resources.length > 0, message = "resources should contain at least resource")
  require(resources.head.isInstanceOf[Script], message = "first resource should be of type bash_script, r_script, python_script, or executable")

  def mainScript: Script =
    resources.head.asInstanceOf[Script]

  def rootDir = {
    _rootDir match {
      case Some(f) => f
      case None => throw new RuntimeException("root directory of functionality object has not been defined yet")
    }
  }
  def rootDir_= (newValue: File) = {
    _rootDir =
      if (newValue.isFile()) {
        Some(newValue.getParentFile())
      } else {
        Some(newValue)
      }
  }

  def mainCode: Option[String] = {
    if (mainScript.isInstanceOf[Executable]) {
      None
    } else if (mainScript.text.isDefined) {
      mainScript.text
    } else {
      val mainPath = Paths.get(rootDir.getPath(), mainScript.path.get).toFile()
      Some(Source.fromFile(mainPath).mkString(""))
    }
  }

  def mainCodeWithArgParse = {
    mainCode.map(code => {
      val lines = code.split("\n")

      val startIndex = lines.indexWhere(_.contains("VIASH START"))
      val endIndex = lines.indexWhere(_.contains("VIASH END"))

      if (startIndex >= 0 && endIndex >= 0) {
        val li =
          lines.slice(0, startIndex + 1) ++
          Array(
            mainScript.commentStr + " The following code has been auto-generated by Viash.",
            mainScript.generateArgparse(this)
          ) ++
          lines.slice(endIndex, lines.length)

        li.mkString("\n")
      } else {
        code
      }
    })

  }
}

object Functionality {
  def parse(file: java.io.File): Functionality = {
    val str = Source.fromFile(file).mkString
    val fun = parser.parse(str)
      .fold(throw _, _.as[Functionality])
      .fold(throw _, identity)

    // save root directory of Functionality object
    fun.rootDir = file
    fun
  }
}
