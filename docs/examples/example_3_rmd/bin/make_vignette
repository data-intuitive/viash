#!/bin/bash

# figure out the directory the viash executable is in, follow symlinks
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
RESOURCES_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# define helper functions
function ViashQuote {
  echo $1 | sed "s#'#MYUNLIKELYVIASHESCAPEPHRASE#g" | sed "s#^\(-[^=]*=\)\(.*\)\$#\1\'\2\'#" | sed "s#^[^\-].*\$#\'&\'#" | sed "s#MYUNLIKELYVIASHESCAPEPHRASE#'\"'\"'#g"
}
function ViashRemoveFlags {
  echo $1 | sed 's/^[^=]*=//'
}
function ViashSetup {
# create temporary directory to store temporary dockerfile in
tmpdir=$(mktemp -d /tmp/viashdocker-make_vignette-XXXXXX)
cat > $tmpdir/Dockerfile << 'VIASHDOCKER'
FROM rocker/verse

RUN Rscript -e 'if (!requireNamespace("remotes")) install.packages("remotes")' && \
  Rscript -e 'remotes::install_cran(c("optparse", "rmarkdown", "tidyverse"), repos = "https://cran.rstudio.com")'


VIASHDOCKER
docker build -t viash_autogen/make_vignette $tmpdir
rm -r $tmpdir
}


VIASHARGS=''
while [[ $# -gt 0 ]]; do
    case "$1" in
        ---setup)
            ViashSetup
            exit 0
            ;;

         --data)
            VOLUME_DATA="$2"
            VIASHARGS="$VIASHARGS `ViashQuote "$1"` `ViashQuote "$2"`"
            shift 2
            ;;
         --data=*)
            VOLUME_DATA=`ViashRemoveFlags "$1"`
            VIASHARGS="$VIASHARGS `ViashQuote "$1"`"
            shift 1
            ;;
         ---debug)
            VIASHDEBUG=yes
            shift 1
            ;;
        *)    # unknown option
            VIASHARGS="$VIASHARGS `ViashQuote "$1"`"
            shift # past argument
            ;;
    esac
done



# provide temporary defaults for Docker
if [ -z ${VOLUME_DATA+x} ]; then
  VOLUME_DATA=`pwd`; # todo: produce error here
fi

# if desired, enter a debug session
if [ ${VIASHDEBUG} ]; then
  docker run -v "$VOLUME_DATA":/data --entrypoint bash -i -v "$RESOURCES_DIR":/resources -v `pwd`:/pwd --workdir /pwd -t --rm viash_autogen/make_vignette
  exit 0
fi

cat << VIASHEOF | docker run -v "$VOLUME_DATA":/data --entrypoint bash -i -v "$RESOURCES_DIR":/resources viash_autogen/make_vignette 
tempscript=\$(mktemp /tmp/viashrun-make_vignette-XXXXXX)
cat > "\$tempscript" << 'VIASHMAIN'
### VIASH START
# The following code has been auto-generated by Viash.
library(optparse, warn.conflicts = FALSE)

# construct parameter list
optlist <- list(
  make_option(c("--title", "-t"), type = "character", default = "My plot", help = "A title for the plot [default %default]"),
  make_option(c("--mean", "-m"), type = "double", default = 0.0, help = "The mean of the distribution [default %default]"),
  make_option(c("--sd", "-s"), type = "double", default = 1.0, help = "The standard deviation of the distribution [default %default]"),
  make_option(c("--output", "-o"), type = "character", help = "Write the parameters to a json file."),
  make_option(c("--format", "-f"), type = "character", default = "pdf_document", help = "The format of the output file. [default %default]"),
  make_option(c("--data"), type = "character", help = "Local path to mount directory for volume 'data'.")
)

# construct parser
parser <- OptionParser(
  usage = "make_vignette  [OPTIONS]",
  description = "An example for generating an RMarkdown output.",
  option_list = optlist
)
parsed <- parse_args(
  positional_arguments = 0,
  object = parser,
  args = commandArgs(trailingOnly = TRUE)
)
par <- parsed\$options

# check whether required parameters exist
for (required_arg in c("data")) {
  if (is.null(par[[required_arg]])) {
    stop('"', required_arg, '" is a required argument. Use "--help" to get more information on the parameters.')
  }
}

# check whether arguments contain expected values
if (!par[["format"]] %in% c("pdf_document", "html_document")) {
  stop('"format" must be one of "pdf_document", "html_document".')
}

resources_dir <- "/resources"

### VIASH END

# get absolute path to file
path <- normalizePath(par\$output, mustWork = FALSE)

# render markdown
rmarkdown::render(
  input = file.path(resources_dir, "report.Rmd"), 
  output_file = basename(path),
  output_dir = dirname(path),
  output_format = par\$format,
  params = par[c("title", "mean", "sd")]
)
VIASHMAIN
Rscript "\$tempscript" $VIASHARGS
rm "\$tempscript"

VIASHEOF

